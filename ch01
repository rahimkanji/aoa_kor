This chapter is a “quick-start” chapter 
that lets you start writing basic assembly 
language programs as rapidly as possible. 
This chapter does the following:
z Presents the basic syntax of an HLA (High Level Assembly) program
z Introduces you to the Intel CPU architecture
z Provides a handful of data declarations, machine instructions, and highlevel control statements 
z Describes some utility routines you can call in the HLA Standard Library
z Shows you how to write some simple assembly language programs
By the conclusion of this chapter, you should understand the basic 
syntax of an HLA program and should understand the prerequisites that are 
needed to start learning new assembly language features in the chapters that 
follow.

이번장은 최대한 빨리 기본적인 어셈블리 프로그램을 만들어보도록 하겠습니다. 이번 장이 다룰 내용은:
- HLA 프로그램의 기본적인 문법을 보여주고
- 인텔 CPU 아키텍쳐를 소개하고
- 쉽게 쓸 수 있는 데이터 선언과 어셈블리 명령어, 고급 제어문을 알려주고
- HLA 표준 라이브러리에 있는 몇가지 쓸만한 루틴을 설명하고
- 어떻게하면 기본적인 어셈블리 언어 프로그램을 작성할 수 있는지 보여줍니다.

이번 장을 읽으면 HLA 프로그램의 기본 문법을 이해하게되고,
나머지 장들에 사용되는 어셈블리 언어의 특징들을 이해하는데 필요한 기본 지식들을 얻게됩니다.

A typical HLA program takes the form shown in Figure 1-1.
pgmID in the template above is a user-defined program identifier. You 
must pick an appropriate descriptive name for your program. In particular, 
pgmID would be a horrible choice for any real program. If you are writing 
programs as part of a course assignment, your instructor will probably give 
you the name to use for your main program. If you are writing your own HLA 
program, you will have to choose an appropriate name for your project.
Identifiers in HLA are very similar to identifiers in most high-level 
languages. HLA identifiers may begin with an underscore or an alphabetic 
character and may be followed by zero or more alphanumeric or underscore 
characters. HLA’s identifiers are case neutral. This means that the identifiers 
are case sensitive insofar as you must always spell an identifier exactly the same 
way in your program (even with respect to upper- and lowercase). However, 
unlike in case-sensitive languages such as C/C++, you may not declare two 
identifiers in the program whose name differs only by alphabetic case.
A traditional first program people write, popularized by Kernighan and 
Ritchie’s The C Programming Language, is the “Hello, world!” program. This 
program makes an excellent concrete example for someone who is learning 
a new language. Listing 1-1 presents the HLA helloWorld program.

일반적인 HLA 프로그램은 그림 1-1과 같은 형태를 가집니다.
그림1-1
위의 형태에서 pgmID는 사용자가 정의한 식별자입니다. 당신의 프로그램을 잘 설명할 수 있는 이름을 식별자로 정해야합니다.
이름을 잘못지으면 프로그램을 끔찍하게 만들 수 있습니다. 수업 과제로 프로그램을 만들 때는
메인 프로그램의 이름을 교수님이 정해줄 것입니다. 혼자서 HLA 프로그램을 만들 때는 스스로 프로젝트의
성격에 맞는 이름을 지어야합니다. 이런 식별자들은 다른 대부분의 고급 언어들과 마찬가지로 시작글자는 밑줄이나 알파벳으로
해야하고 나머지 글자는 숫자나 알파벳, 밑줄을 사용할 수 있습니다. HLA의 식별자는 대소문자를 구분하지 않습니다.
프로그램 안에 정의된 식별자는 각 글자가 대문자,소문자 구분없이 동일한 이름을 가져야합니다. C/C++같은 대소문자를 구별하는
언어들과 다르게 대소문자만 다르고 같은 이름인 식별자 이름을 사용할 수 없습니다.
Kernighan과 Ritchie의 The C Programming Language 책에서 유명해지고 많음 사람들이 
자신의 첫 프로그램으로 만들어온 "Hello, world!" 프로그램을 만들어보겠습니다.
이 프로그램은 새로운 언어를 배우는 사람들에게 좋은 예제가 되어왔습니다. 코드1-1은 HLA용 helloWorld 프로그램입니다.

program helloWorld;
#include( "stdlib.hhf" );
begin helloWorld;
 stdout.put( "Hello, World of Assembly Language", nl );
end helloWorld;

The #include statement in this program tells the HLA compiler to 
include a set of declarations from the stdlib.hhf (standard library, HLA 
Header File). Among other things, this file contains the declaration of the 
stdout.put code that this program uses. 

#include는 HLA 컴파일러에게 이 프로그램이 stdlib.hhf(표준 라이브러리, HLA Header File의 약자)의 선언들을
포함할 것이라고 알려줍니다. 이 파일에는 우리가 사용할 stdout.put 코드의 선언이 들어있습니다.


The stdout.put statement is the print statement for the HLA language. 
You use it to write data to the standard output device (generally the console). 
To anyone familiar with I/O statements in a high-level language, it should 
be obvious that this statement prints the phrase Hello, World of Assembly 
Language. The nl appearing at the end of this statement is a constant, also 
defined in stdlib.hhf, that corresponds to the newline sequence.

stdout.put은 HLA언어에서 표준 출력 장치(일반적으로 콘솔)에 데이터를 출력하는데 사용됩니다.
고급언어의 입출력문에 익숙하다면 stdout.put이 어셈블리 언어에서 Hello, World를 출력하는
부분이라는 것을 금방 알 수 있습니다. 끝에있는 nl은 상수인데 stdlib.hhf에 정의되어있고, 
고급언어의 개행문자에 해당합니다.


Note that semicolons follow the program, begin, stdout.put, and end
statements. Technically speaking, a semicolon does not follow the #include
statement. It is possible to create include files that generate an error if a 
semicolon follows the #include statement, so you may want to get in the 
habit of not putting a semicolon here.

program, begin, stdout.put, end 문을 보면 끝에 세미콜론이 있는 것을 알 수 있습니다.
그런데 사실 문법적으로 정확하게 말하면 #include문 끝에 있는 세미콜론은 #include문을 위해
있는 것이 아닙니다. #include문의 끝에 세미콜론이 있으면 에러를 내도록 #include문에 들어갈 파일을 만들어서
세미콜론을 쓰지 않을 수도 있습니다.

The #include is your first introduction to HLA declarations. The #include
itself isn’t actually a declaration, but it does tell the HLA compiler to 
substitute the file stdlib.hhf in place of the #include directive, thus inserting 
several declarations at this point in your program. Most HLA programs you 
will write will need to include one or more of the HLA Standard Library 
header files (stdlib.hhf actually includes all the standard library definitions 
into your program).

이 #include가 HLA언어에서 여러분이 배우시게될 첫번째 선언문입니다. #include 자체는 사실 선언문이 아닙니다.
단지 HLA 컴파일러에게 stdlib.hhf 파일을 #include 지시어가 있는 부분에 집어넣으라고
알려주는 일을 할뿐입니다. 그래서 결과적으로 프로그램에 stdlib.hhf에있는 여러가지 선언들이 추가되는 것입니다.
우리가 만들 대부분의 HLA 프로그램들은 하나 이상 HLA 표준 라이브러리의 헤더 파일을 포함할 것입니다(stdlib.hhf는
거의 모든 표준 라이브러리 정의들을 포함하고 있습니다).


Compiling this program produces a console application. Running this 
program in a command window prints the specified string, and then control 
returns to the command-line interpreter (or shell in Unix terminology).
HLA is a free-format language. Therefore, you may split statements 
across multiple lines if this helps to make your programs more readable. For 
example, you could write the stdout.put statement in the helloWorld program 
as follows:

이 프로그램을 컴파일하면 콘솔용 어플리케이션이 만들어집니다. 만들어진 어플리케이션을
윈도우의 커맨트 창에서 실행하면 문자열이 출력되고 다시 커맨드라인 인터프리터(유닉스의 쉘과 같은)가 나타납니다.
HLA는 형식이 자유로운 언어입니다. 그렇게 해서 프로그램이 더 잘 읽혀질 수만 있다면 하나의 문장을 여러 줄에
써도 됩니다. helloWorld 프로그램의 stdout.put 문장을 다음과 같이 써도 되는 것입니다.

stdout.put
(
"Hello, "
"World of Assembly Language",
nl
);

Indeed, nl (the newline) is really nothing more than a string constant,
so (technically) the comma between the nl and the preceding string isn’t
necessary. You’ll often see the above written as
stdout.put( "Hello, World of Assembly Language" nl );
Notice the lack of a comma between the string constant and nl; this turns
out to be legal in HLA, though it applies only to certain constants; you may
not, in general, drop the comma. Chapter 4 explains in detail how this
works. This discussion appears here because you’ll probably see this “trick”
employed by sample code prior to the formal explanation.

실제로 nl(개행문자)는 단순히 문자열 상수일 뿐이라서 (기술적으로만 따지면) nl과
그 앞의 문자열 사이의 콤마는 없어도 됩니다. 앞으로 stdout.put( "Hello, World of Assembly Language" nl ); 와 같이
쓰는 것을 자주 보게 될 것입니다. 일반적으로는 콤마를 빠뜨리면 안됩니다. 일부 상수들만 콤마를 생략해서
사용할 수 있으므로 주의해야합니다. 4장에서 세부적인 동작 원리를 설명하겠습니다. 여기에서는
이런 트릭이 있다는 것만 알아두시기 바랍니다.

1.2 Running Your First HLA Program
The whole purpose of the “Hello, world!” program is to provide a simple
example by which someone who is learning a new programming language
can figure out how to use the tools needed to compile and run programs in
that language. True, the helloWorld program in Section 1.1 helps demonstrate
the format and syntax of a simple HLA program, but the real purpose behind
a program like helloWorld is to learn how to create and run a program from
beginning to end. Although the previous section presents the layout of an
HLA program, it did not discuss how to edit, compile, and run that program.
This section will briefly cover those details.

1.2 첫번째 HLA 프로그램을 실행해보기

"Hello, world!" 프로그램은 새로운 프로그래밍 언어를 배우는 사람에게 그 언어로된 프로그램의 컴파일과 실행에
어떤 도구들이 사용되는지를 보여주는게 진짜 목적입니다. 1.1장에있는 helloWorld 프로그램를 통해
간단한 HLA 프로그램의 문법과 형태를 알 수 있는 것도 사실입니다. 하지만 진짜 목적은
프로그램을 생성하고 실행하는 방법을 전체적으로 배우는 것입니다. 이전 장에서 HLA 프로그램의
구성을 보긴 했지만 어떻게 편집하고 컴파일하고 프로그램을 실행하는지는 설명하지 않았습니다.
이번 장에서 그것들을 다루겠습니다.


All of the software you need to compile and run HLA programs can be
found at http://www.artofasm.com/ or at http://webster.cs.ucr.edu/. Select High
Level Assembly from the Quick Navigation Panel and then the Download
HLA link from that page. HLA is currently available for Windows, Mac OS X,
Linux, and FreeBSD. Download the appropriate version of the HLA software
for your system. From the Download HLA web page, you will also be able
to download all the software associated with this book. If the HLA download
doesn’t include them, you will probably want to download the HLA
reference manual and the HLA Standard Library reference manual along
with HLA and the software for this book. This text does not describe the
entire HLA language, nor does it describe the entire HLA Standard Library.
You’ll want to have these reference manuals handy as you learn assembly
language using HLA.

HLA 프로그램을 컴파일하고 실행하기 위해 필요한 모든 소프트웨어는 
http://www.artofasm.com/ or at http://webster.cs.ucr.edu/ 에서 찾을 수 있습니다.
High Level Assembly 메뉴를 선택하고 HLA 다운로드 링크를 클릭하면 됩니다. HLA는 현재
윈도우, Mac OS X, 리눅스, FreeBSD에서 사용가능합니다. HLA 다운로드 관련 웹 페이지에서
이 책과 관련된 모든 소프트웨어를 다운받을 수 있습니다. HLA의 레퍼런스 메뉴얼이나
HLA 표준 라이브러리 레퍼런스 메뉴얼도 다운받는게 좋을 것입니다. 이 책에서
HLA 언어의 전부를 설명하지 않고 HLA 표준 라이브러리도 전부를 설명하지 않을 것이므로
이런 레퍼런스 메뉴얼이 필요하게 될겁니다.


This section will not describe how to install and set up the HLA system
because those instructions change over time. The HLA download page for
each of the operating systems describes how to install and use HLA. Please
consult those instructions for the exact installation procedure.
Creating, compiling, and running an HLA program is very similar to the
process you’d use when creating, compiling, or running a program in any
computer language. First, because HLA is not an integrated development
environment (IDE) that allows you to edit, compile, test and debug, and run
your application all from within the same program, you’ll create and edit
HLA programs using a text editor.

이번 장에서 HLA 시스템을 설치하고 환경을 설정하는 방법을 설명하지 않을 것입니다. 그런 것들은
항상 변하기 때문입니다. HLA 다운로드 페이지에 각 운영체제별로 HLA를 설치하고 사용하는
방법에 대해서 나와있습니다. 정확한 설치를 위해 자세히 살펴보시기 바랍니다.
HLA 프로그램을 만들고 컴파일하고 실행하는 것은 다른 어떤 언어의 프로그램과도 동일합니다.
HLA용 통합 개발 환경(IDE)가 없기 때문에 하나의 프로그램 안에서 편집, 컴파일, 테스트, 디버깅,
어플리케이션의 실행 등을 한꺼번에 할 수는 없습니다. 처음에는 텍스트 에디터를 이용해서
HLA 프로그램을 생성하고 편집해야할 것입니다.






