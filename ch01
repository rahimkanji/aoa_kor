This chapter is a “quick-start” chapter 
that lets you start writing basic assembly 
language programs as rapidly as possible. 
This chapter does the following:
z Presents the basic syntax of an HLA (High Level Assembly) program
z Introduces you to the Intel CPU architecture
z Provides a handful of data declarations, machine instructions, and highlevel control statements 
z Describes some utility routines you can call in the HLA Standard Library
z Shows you how to write some simple assembly language programs
By the conclusion of this chapter, you should understand the basic 
syntax of an HLA program and should understand the prerequisites that are 
needed to start learning new assembly language features in the chapters that 
follow.

이번장은 최대한 빨리 기본적인 어셈블리 프로그램을 만들어보도록 하겠습니다. 이번 장이 다룰 내용은:
- HLA 프로그램의 기본적인 문법을 보여주고
- 인텔 CPU 아키텍쳐를 소개하고
- 쉽게 쓸 수 있는 데이터 선언과 어셈블리 명령어, 고급 제어문을 알려주고
- HLA 표준 라이브러리에 있는 몇가지 쓸만한 루틴을 설명하고
- 어떻게하면 기본적인 어셈블리 언어 프로그램을 작성할 수 있는지 보여줍니다.

이번 장을 읽으면 HLA 프로그램의 기본 문법을 이해하게되고,
나머지 장들에 사용되는 어셈블리 언어의 특징들을 이해하는데 필요한 기본 지식들을 얻게됩니다.

A typical HLA program takes the form shown in Figure 1-1.
pgmID in the template above is a user-defined program identifier. You 
must pick an appropriate descriptive name for your program. In particular, 
pgmID would be a horrible choice for any real program. If you are writing 
programs as part of a course assignment, your instructor will probably give 
you the name to use for your main program. If you are writing your own HLA 
program, you will have to choose an appropriate name for your project.
Identifiers in HLA are very similar to identifiers in most high-level 
languages. HLA identifiers may begin with an underscore or an alphabetic 
character and may be followed by zero or more alphanumeric or underscore 
characters. HLA’s identifiers are case neutral. This means that the identifiers 
are case sensitive insofar as you must always spell an identifier exactly the same 
way in your program (even with respect to upper- and lowercase). However, 
unlike in case-sensitive languages such as C/C++, you may not declare two 
identifiers in the program whose name differs only by alphabetic case.
A traditional first program people write, popularized by Kernighan and 
Ritchie’s The C Programming Language, is the “Hello, world!” program. This 
program makes an excellent concrete example for someone who is learning 
a new language. Listing 1-1 presents the HLA helloWorld program.

일반적인 HLA 프로그램은 그림 1-1과 같은 형태를 가집니다.
그림1-1
위의 형태에서 pgmID는 사용자가 정의한 식별자입니다. 당신의 프로그램을 잘 설명할 수 있는 이름을 식별자로 정해야합니다.
이름을 잘못지으면 프로그램을 끔찍하게 만들 수 있습니다. 수업 과제로 프로그램을 만들 때는
메인 프로그램의 이름을 교수님이 정해줄 것입니다. 혼자서 HLA 프로그램을 만들 때는 스스로 프로젝트의
성격에 맞는 이름을 지어야합니다. 이런 식별자들은 다른 대부분의 고급 언어들과 마찬가지로 시작글자는 밑줄이나 알파벳으로
해야하고 나머지 글자는 숫자나 알파벳, 밑줄을 사용할 수 있습니다. HLA의 식별자는 대소문자를 구분하지 않습니다.
프로그램 안에 정의된 식별자는 각 글자가 대문자,소문자 구분없이 동일한 이름을 가져야합니다. C/C++같은 대소문자를 구별하는
언어들과 다르게 대소문자만 다르고 같은 이름인 식별자 이름을 사용할 수 없습니다.
Kernighan과 Ritchie의 The C Programming Language 책에서 유명해지고 많음 사람들이 
자신의 첫 프로그램으로 만들어온 "Hello, world!" 프로그램을 만들어보겠습니다.
이 프로그램은 새로운 언어를 배우는 사람들에게 좋은 예제가 되어왔습니다. 코드1-1은 HLA용 helloWorld 프로그램입니다.

program helloWorld;
#include( "stdlib.hhf" );
begin helloWorld;
 stdout.put( "Hello, World of Assembly Language", nl );
end helloWorld;

The #include statement in this program tells the HLA compiler to 
include a set of declarations from the stdlib.hhf (standard library, HLA 
Header File). Among other things, this file contains the declaration of the 
stdout.put code that this program uses. 

#include는 HLA 컴파일러에게 이 프로그램이 stdlib.hhf(표준 라이브러리, HLA Header File의 약자)의 선언들을
포함할 것이라고 알려줍니다. 이 파일에는 우리가 사용할 stdout.put 코드의 선언이 들어있습니다.


The stdout.put statement is the print statement for the HLA language. 
You use it to write data to the standard output device (generally the console). 
To anyone familiar with I/O statements in a high-level language, it should 
be obvious that this statement prints the phrase Hello, World of Assembly 
Language. The nl appearing at the end of this statement is a constant, also 
defined in stdlib.hhf, that corresponds to the newline sequence.

stdout.put은 HLA언어에서 표준 출력 장치(일반적으로 콘솔)에 데이터를 출력하는데 사용됩니다.
고급언어의 입출력문에 익숙하다면 stdout.put이 어셈블리 언어에서 Hello, World를 출력하는
부분이라는 것을 금방 알 수 있습니다. 끝에있는 nl은 상수인데 stdlib.hhf에 정의되어있고, 
고급언어의 개행문자에 해당합니다.


Note that semicolons follow the program, begin, stdout.put, and end
statements. Technically speaking, a semicolon does not follow the #include
statement. It is possible to create include files that generate an error if a 
semicolon follows the #include statement, so you may want to get in the 
habit of not putting a semicolon here.

program, begin, stdout.put, end 문을 보면 끝에 세미콜론이 있는 것을 알 수 있습니다.
그런데 사실 문법적으로 정확하게 말하면 #include문 끝에 있는 세미콜론은 #include문을 위해
있는 것이 아닙니다. #include문의 끝에 세미콜론이 있으면 에러를 내도록 #include문에 들어갈 파일을 만들어서
세미콜론을 쓰지 않을 수도 있습니다.

The #include is your first introduction to HLA declarations. The #include
itself isn’t actually a declaration, but it does tell the HLA compiler to 
substitute the file stdlib.hhf in place of the #include directive, thus inserting 
several declarations at this point in your program. Most HLA programs you 
will write will need to include one or more of the HLA Standard Library 
header files (stdlib.hhf actually includes all the standard library definitions 
into your program).

이 #include가 HLA언어에서 여러분이 배우시게될 첫번째 선언문입니다. #include 자체는 사실 선언문이 아닙니다.
단지 HLA 컴파일러에게 stdlib.hhf 파일을 #include 지시어가 있는 부분에 집어넣으라고
알려주는 일을 할뿐입니다. 그래서 결과적으로 프로그램에 stdlib.hhf에있는 여러가지 선언들이 추가되는 것입니다.
우리가 만들 대부분의 HLA 프로그램들은 하나 이상 HLA 표준 라이브러리의 헤더 파일을 포함할 것입니다(stdlib.hhf는
거의 모든 표준 라이브러리 정의들을 포함하고 있습니다).


Compiling this program produces a console application. Running this 
program in a command window prints the specified string, and then control 
returns to the command-line interpreter (or shell in Unix terminology).
HLA is a free-format language. Therefore, you may split statements 
across multiple lines if this helps to make your programs more readable. For 
example, you could write the stdout.put statement in the helloWorld program 
as follows:

이 프로그램을 컴파일하면 콘솔용 어플리케이션이 만들어집니다. 만들어진 어플리케이션을
윈도우의 커맨트 창에서 실행하면 문자열이 출력되고 다시 커맨드라인 인터프리터(유닉스의 쉘과 같은)가 나타납니다.
HLA는 형식이 자유로운 언어입니다. 그렇게 해서 프로그램이 더 잘 읽혀질 수만 있다면 하나의 문장을 여러 줄에
써도 됩니다. helloWorld 프로그램의 stdout.put 문장을 다음과 같이 써도 되는 것입니다.


